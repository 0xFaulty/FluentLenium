{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"# What is FluentLenium ?\r\n\r\nFluentLenium is a framework that helps you to write [Selenium](http://seleniumhq.org/) tests.\r\nFluentLenium provides you a [fluent interface](http://en.wikipedia.org/wiki/Fluent_interface) to the [Selenium Web Driver](http://seleniumhq.org/docs/03_webdriver.html).\r\nFluentLenium lets you use the assertion framework you like, either [jUnit assertions](http://www.junit.org/apidocs/org/junit/Assert.html), [Hamcrest](http://code.google.com/p/hamcrest/wiki/Tutorial) \r\nor [Fest-assert](http://docs.codehaus.org/display/FEST/Fluent+Assertions+Module).\r\n\r\n\r\n# 5 second example\r\n```java\r\nimport org.junit.Test;\r\n\r\nimport static org.fest.assertions.Assertions.assertThat;\r\n\r\npublic class BingTest extends FluentTest {\r\n    @Test\r\n    public void title_of_bing_should_contain_search_query_name() {\r\n        goTo(\"http://www.bing.com\");\r\n        fill(\"#sb_form_q\").with(\"FluentLenium\");\r\n        submit(\"#sb_form_go\");\r\n        assertThat(title()).contains(\"FluentLenium\");\r\n    }\r\n}\r\n```\r\n\r\n## Maven\r\n\r\nTo add FluentLenium to your project, just add the following dependency to your `pom.xml`:\r\n\r\n```xml \r\n<dependency>\r\n    <groupId>org.fluentlenium</groupId>\r\n    <artifactId>fluentlenium-core</artifactId>\r\n    <version>0.7.3</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```\r\n\r\nBy default, FluentLenium provides a jUnit adapter.\r\n\r\nIf you need the fest-assert dependency to improve the legibility of your test code :\r\n\r\n```xml \r\n<dependency>\r\n    <groupId>org.fluentlenium</groupId>\r\n    <artifactId>fluentlenium-festassert</artifactId>\r\n    <version>0.7.3</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```\r\n\r\nAn adapter has also been built for using FluentLenium with TestNG :\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>org.fluentlenium</groupId>\r\n    <artifactId>fluentlenium-testng</artifactId>\r\n    <version>0.7.3</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```\r\n\r\nJust extend `org.fluentlenium.adapter.FluentTestNg` instead of `org.fluentlenium.adapter.FluentTest`.\r\n\r\n##Static imports\r\n\r\nIf you need to do some filtering :\r\n\r\n```java\r\nimport static org.fluentlenium.core.filter.FilterConstructor.*;\r\n```\r\n\r\n### Static import using fest assert\r\nThe static assertions to use fest assert are :\r\n\r\n```java\r\nimport static org.fest.assertions.Assertions.assertThat;\r\nimport static org.fest.assertions.fluentlenium.FluentLeniumAssertions.assertThat;\r\n```\r\n\r\n### Basic Methods\r\nYou can use `url()` , `title()` or `pageSource()` to get the url, the title or the page source of the current page.\r\n\r\n###  Selector\r\n#### Default Selector\r\nYou can use CSS1, CSS2 and CSS3 selectors with the same restrictions as in Selenium.\r\n\r\nIf you want to find the list of elements which have :\r\n\r\n  - the `id` \"title\" : `find(\"#title\")`\r\n  - the `class` name \"small\" : `find(\".small\")`\r\n  - the `tag` name \"input\" : `find(\"input\")`\r\n\r\nYou are free to use most of the CSS3 syntax, which means that\r\n`find(\"input[class=rightForm]\")`\r\nwill return the list of all input elements which have the class rightForm\r\n\r\n#### Custom filter\r\nBut what if you want all the input that have text equal to \"Sam\" ?\r\nYou can use filters to allow that kind of search. For example :\r\n\r\n```java\r\nfind(\".small\", withName(\"foo\"))\r\nfind(\".small\", withId(\"idOne\"))\r\nfind(\".small\", withText(\"This field is mandatory.\"))\r\n```\r\n\r\nYou can also write chained filters :\r\n`find(\".small\", withName(\"foo\"), withId(\"id1\"))` will return all the elements matching the 3 criteria.\r\n\r\nYou can do more complex string matching on the above filters using the following methods :\r\n\r\n  - `contains`\r\n  - `notContains`\r\n  - `startsWith`\r\n  - `notStartsWith`\r\n  - `endsWith`\r\n  - `notEndsWith`\r\n\r\nFor each of them, you can choose to use a css selector :\r\n\r\n```java\r\nfind(\".small\", withName().notContains(\"name\")\r\nfind(\".small\", withId().notStartsWith(\"id\")\r\nfind(\".small\", withText().endsWith(\"Female\"))\r\n```\r\n\r\nOr to be more precise, you can use regular expressions :\r\n\r\n```java\r\nfind(\".small\", withName().contains(regex(\"na?me[0-9]*\"))\r\nfind(\".small\", withName().notStartsWith(regex(\"na?me[0-9]*\"))\r\n```\r\n\r\nContains, startsWith and endsWith with a regexp pattern look for a subsection of the pattern.\r\n\r\nOf course, if you are a regexp jedi, you don't need these!\r\n\r\nMore will come soon to filter to create a complete search tool (containsWord, able to choose if you want to ignore case ...)\r\n\r\n\r\n### N-th\r\nIf you want the first element that matches your criteria, just use :\r\n\r\n```java\r\nfindFirst(myCssSelector)\r\n```\r\n\r\nor alternatively\r\n\r\n```java\r\nfind(myCssSelector).first()\r\n```\r\n\r\nIf you want the element at the given position :\r\n\r\n```java\r\nfind(myCssSelector, 2)\r\n```\r\n\r\nOf course, you can use both position filter and custom filter :\r\n\r\n```java\r\nfind(myCssSelector, 2, withName(\"foo\"))\r\n```\r\n\r\n\r\n#### Find on children\r\nYou can also chain the find call :\r\n`find(myCssSelector).find(\"input\")` will return all the input elements in the css selector tree.\r\nYou can be more specific :\r\n\r\n```java\r\nfind(myCssSelector, 2, withName(\"foo\")).find(\"input\", withName(\"bar\"))\r\n```\r\n\r\nor\r\n\r\n```java\r\nfind(myCssSelector, 2, withName(\"foo\")).findFirst(\"input\", withName(\"bar\"))\r\n```\r\n\r\n## Element\r\nIf you need to access to the name, the id, the value, the tagname or the text of an element :\r\n\r\n```java\r\nfindFirst(myCssSelector).getName()\r\nfindFirst(myCssSelector).getId()\r\nfindFirst(myCssSelector).getValue()\r\nfindFirst(myCssSelector).getTagName()\r\nfindFirst(myCssSelector).getText()\r\n```\r\n\r\nIf you need to access a specific value of an attribute:\r\n\r\n```java\r\nfindFirst(myCssSelector).getAttribute(\"myCustomAttribute\")\r\n```\r\n\r\nYou can also access a list of all the names, text, and ids of a list of elements:\r\n```java\r\nfind(myCssSelector).getNames()\r\nfind(myCssSelector).getIds()\r\nfind(myCssSelector).getValues()\r\nfind(myCssSelector).getAttributes(\"myCustomAttribute\")\r\nfind(myCssSelector).getTexts()\r\n```\r\n\r\nIf you want to know the name, the id, the value, the text or the value of an attribute of the first element on the list\r\nfind(myCssSelector).getName()\r\nfind(myCssSelector).getId()\r\nfind(myCssSelector).getValue()\r\nfind(myCssSelector).getAttribute(\"myCustomAttribute\")\r\nfind(myCssSelector).getText()\r\n```\r\n\r\nIf you need to get the underlying html content of an element:\r\n```java\r\nfindFirst(myCssSelector).html()\r\n```\r\nTo know the dimension of an element (with and height):\r\n\r\n```java\r\nDimension dimension = findFirst(myCssSelector).getSize()\r\n```\r\n\r\nYou can also check if the element is displayed, enabled or selected:\r\n```java\r\nfindFirst(myCssSelector).isDisplayed()\r\nfindFirst(myCssSelector).isEnabled()\r\nfindFirst(myCssSelector).isSelected()\r\n```\r\n\r\n## Form Actions\r\nClicking, filling, submitting and cleaning an element or list of elements is simple and intuitive.\r\n\r\n### Fill\r\n`fill(\"input\").with(\"bar\")` or `find(\"input\").text(\"bar\")` will fill all the input elements with bar. \r\nIf you want for example to exclude checkboxes, you can use the css filtering like `fill(\"input:not([type='checkbox'])\").with(\"tomato\")`, \r\nyou can also use the filtering provided by FluentLenium `fill(\"input\", with(\"type\", notContains(\"checkbox\"))).with(\"tomato\")`\r\n\r\n\r\n`fill(\"input\").with(\"myLogin\",\"myPassword\")` will fill the first element of the input selection with myLogin, the second with myPassword. \r\nIf there are more input elements found, the last value (myPassword) will be repeated for each subsequent element.\r\n\r\nDon't forget, only visible fields will be modified. It simulates a real person using a browser!\r\n\r\n### Click\r\n```java\r\nclick(\"#create-button\")\r\n```\r\n\r\nThis will click on all the visible fields returned by the search.\r\n\r\n### Clear\r\n```java\r\nclear(\"#firstname\")\r\n```\r\n\r\nThis will clear all the visible fields returned by the search.\r\n\r\n### Submit\r\n```java\r\nsubmit(\"#account\")\r\n```\r\n\r\nThis will submit all the visible fields returned by the search.\r\n\r\n### Double click\r\n```java\r\nfind(\"#create-button\").doubleClick()\r\n```\r\n\r\n## Page Object pattern\r\nSelenium tests can easily become a mess.  To avoid this, you can use the [Page Object Pattern](http://code.google.com/p/selenium/wiki/PageObjects).\r\nPage Object Pattern will enclose all the plumbing relating to how pages interact with each other and how the user\r\ninteracts with the page, which makes tests a lot easier to read and to maintain.\r\n\r\nTry to construct your Page thinking that it is better if you offer services from your page rather than just the internals of the page.\r\nA Page Object can model the whole page or just a part of it.\r\n\r\nTo construct a Page, extend [org.fluentlenium.core.FluentPage](https://github.com/FluentLenium/FluentLenium/blob/master/fluentlenium-core/src/main/java/org/fluentlenium/core/FluentPage.java).\r\nIn most cases, you have to define the url of the page by overriding the `getUrl` method.\r\nBy doing this, you can then use the `goTo(myPage)` method in your test code.\r\n\r\nIt may be necessary to ensure that you are on the right page, not just at the url returned by `getUrl` [accessible in your test via the void url() method].\r\nTo do this, override the `isAt` method to run all the assertions necessary in order to ensure that you are on the right page.\r\nFor example, if I choose that the title will be sufficient to know if I'm on the right page:\r\n\r\n```java\r\n@Override\r\npublic void isAt() {\r\n    assertThat(title()).contains(\"Selenium\");\r\n}\r\n```\r\n\r\nCreate your own methods to easily fill out forms, go to another or whatever else may be needed in your test.\r\n\r\nFor example:\r\n\r\n```java\r\npublic class LoginPage extends FluentPage {\r\n    public String getUrl() {\r\n        return \"myCustomUrl\";\r\n    }\r\n    public void isAt() {\r\n        assertThat(title()).isEqualTo(\"MyTitle\");\r\n    }\r\n    public void fillAndSubmitForm(String... paramsOrdered) {\r\n        fill(\"input\").with(paramsOrdered);\r\n        click(\"#create-button\");\r\n    }\r\n}\r\n```\r\n\r\nAnd the corresponding test:\r\n\r\n```java\r\npublic void checkLoginFailed() {\r\n\tgoTo(loginPage);\r\n\tloginPage.fillAndSubmitLoginForm(\"login\", \"wrongPass\");\r\n\tloginPage.isAt();\r\n}\r\n```\r\n\r\nOr if you have the [Fest-assert](http://docs.codehaus.org/display/FEST/Fluent+Assertions+Module) module (just static import org.fest.assertions.fluentlenium.FluentLeniumAssertions.assertThat)\r\n\r\n```java\r\npublic void checkLoginFailed() {\r\n\tgoTo(loginPage);\r\n\tloginPage.fillAndSubmitLoginForm(\"login\",\"wrongPass\");\r\n\tassertThat(find(\".error\")).hasSize(1);\r\n\tassertThat(loginPage).isAt();\r\n}\r\n```\r\n\r\n###Page usage\r\nYou can use the annotation `@Page` to construct your page easily.\r\n\r\nFor example:\r\n\r\n```java\r\npublic class AnnotationInitialization extends FluentTest {\r\n    public WebDriver webDriver = new HtmlUnitDriver();\r\n\r\n    @Page\r\n    public TestPage page;\r\n\r\n\r\n    @Test\r\n    public void test_no_exception() {\r\n        goTo(page);\r\n        //put your assertions here\r\n    }\r\n\r\n\r\n    @Override\r\n    public WebDriver getDefaultDriver() {\r\n        return webDriver;\r\n    }\r\n\r\n}\r\n```\r\n\r\nYou can also use the factory method `createPage`:\r\n\r\n```java\r\npublic class BeforeInitialization extends FluentTest {\r\n\tpublic WebDriver webDriver = new HtmlUnitDriver();\r\n\tpublic TestPage page;\r\n\t@Before\r\n\tpublic void beforeTest() {\r\n\t\tpage = createPage(TestPage.class);\r\n\t}\r\n\t@Test\r\n\tpublic void test_no_exception() {\r\n\t\tpage.go();\r\n\t}\r\n\t@Override\r\n\tpublic WebDriver getDefaultDriver() {\r\n\t\treturn webDriver;\r\n\t}\r\n}\r\n```\r\n\r\nWithin a page, all FluentWebElement fields are automatically searched for by name or id. For example, if you declare a FluentWebElement named `createButton`, \r\nit will search the page for an element where `id` is `createButton` or name is `createButton`. \r\nAll elements are proxified which means that the search is not done until you try to access the element.\r\n\r\n```java\r\npublic class LoginPage extends FluentPage {\r\n   FluentWebElement createButton;\r\n   public String getUrl() {\r\n       return \"myCustomUrl\";\r\n   }\r\n   public void isAt() {\r\n       assertThat(title()).isEqualTo(\"MyTitle\");\r\n   }\r\n   public void fillAndSubmitForm(String... paramsOrdered) {\r\n       fill(\"input\").with(paramsOrdered);\r\n       createButton.click();\r\n   }\r\n}\r\n```\r\nIf you need to wait for an element to be present, especially when waiting for an ajax call to complete, you can use the @AjaxElement annotation on the fields :\r\n\r\n```java\r\npublic class LoginPage extends FluentPage {\r\n   @AjaxElement\r\n   FluentWebElement myAjaxElement;\r\n}\r\n```\r\nYou can set the timeout in seconds for the page to throw an error if not found with @AjaxElemet(timeountOnSeconds=3) if you want to wait 3 seconds.\r\nBy default, the timeout is set to one second.\r\n\r\n\r\n## Wait for an Ajax Call\r\n\r\nThere are multiple ways to make your driver wait for the result of an asynchronous call.\r\nFluentLenium provides a rich and fluent API in order to help you to handle AJAX calls.\r\nIf you want to wait for at most 5 seconds until the number of elements corresponding to the until criteria (here the class small) has the requested size:\r\n\r\n\r\n```java\r\nawait().atMost(5, TimeUnit.SECONDS).until(\".small\").hasSize(3);\r\n```\r\nThe default wait is 500 ms.\r\n\r\nInstead of hasSize, you can also use `hasText(\"myTextValue\")`, `isPresent()`, `isNotPresent()`, `hasId(\"myId\")`, `hasName(\"myName\")`, `containsText(\"myName\")`,`areDisplayed()`, `areEnabled()`.\r\nThe `isPresent()` assertion is going to check if there is at most one element on the page corresponding to the filter.\r\n\r\nIf you need to be more precise, you can also use filters in the search:\r\n\r\n```java\r\nawait().atMost(5, TimeUnit.SECONDS).until(\".small\").withText(\"myText\").hasSize(3);\r\n```\r\nYou can also use after hasSize() : 'greaterThan(int)', 'lessThan(int)', 'lessThanOrEqualTo(int)', 'greaterThanOrEqualTo(int)' , 'equalTo(int)', 'notEqualTo(int)'\r\n\r\nYou can also use matchers:\r\n\r\n```java\r\nawait().atMost(5, TimeUnit.SECONDS).until(\".small\").withText().startsWith(\"start\").isPresent();\r\n```\r\n     \r\nJust use `startsWith`, `notStartsWith`, `endsWith`, `notEndsWith`, `contains`, `notContains`, `equalTo`.\r\n\r\nIf you need to filter on a custom attribute name, this syntax will help :\r\n\r\n```java\r\nawait().atMost(5, TimeUnit.SECONDS).until(\".small\").with(\"myAttribute\").startsWith(\"myValue\").isPresent();\r\n```\r\n\r\nYou can also check if the page is loaded using\r\n```java\r\nawait().atMost(1, NANOSECONDS).untilPage().isLoaded();\r\n```\r\n\r\nIf you want to wait until the page you want is the page that you are at, you can use :\r\n```java\r\nawait().atMost(5, TimeUnit.SECONDS).untilPage(myPage).isAt();\r\n```\r\nThis methods actually calls myPage.isAt(). If the isAt() method of the myPage object does not throw any exception during the time specified, then the framework will consider that the page is the one wanted.\r\n\r\n### Polling Every\r\nYou can also define the polling frequency, for example, if you want to poll every 5 seconds :\r\n ```java\r\nawait().pollingEvery(5, TimeUnit.SECONDS).until(\".small\").with(\"myAttribute\").startsWith(\"myValue\").isPresent();\r\n```\r\nThe default value is 500ms.\r\n\r\nYou can also chain filter in the asynchronous API:\r\n\r\n```java\r\nawait().atMost(5, TimeUnit.SECONDS).until(\".small\").with(\"myAttribute\").startsWith(\"myValue\").with(\"a second attribute\").equalTo(\"my@ndValue\").isPresent();\r\n```\r\n## Alternative Syntax\r\n\r\nIf you are more familiar with the [JQuery](http://jquery.com/) syntax, you can use the familiar `$` method:\r\n\r\n```java\r\ngoTo(\"http://mywebpage/\");\r\n$(\"#firstName\").text(\"toto\");\r\n$(\"#create-button\").click();\r\nassertThat(title()).isEqualTo(\"Hello toto\");\r\n```\r\n\r\nBoth syntaxes are equivalent. `$` is simply an alias for the `find` method.\r\n\r\n\r\n## Execute javascript\r\nIf you need to execute some javascript, just call `executeScript` with your script as parameter.\r\nFor example, if you have a javascript method called change and you want to call it just add this in your test:\r\n\r\n```java\r\nexecuteScript(\"change();\");\r\n```\r\n\r\n## Taking Snapshots\r\nYou can take a snaphost of the browser\r\n```java\r\ndriver.takeScreenShot();\r\n```\r\nThe file will be named using the current timestamp.\r\nYou can of course specify a path and a name using :\r\n```java\r\ndriver.takeScreenShot(pathAndfileName);\r\n```\r\n\r\n## Isolate Tests\r\nIf you want to test concurrency or if you need for any reason to not use the mechanism of extension of FluentLenium, you can also, instead of extending FluentTest, instantiate your fluent test object directly.\r\n```java\r\n= new IsolatedTest().goTo(DEFAULT_URL).\r\n    await().atMost(1, SECONDS).until(\".small\").with(\"name\").equalTo(\"name\").isPresent().\r\n    find(\"input\").first().isEnabled();```\r\n```\r\n\r\n\r\n\r\n## Customize FluentLenium\r\n\r\n### Driver\r\nIf you need to change your driver, just override the `getDefaultDriver` method in your test. You can use every driver.\r\n\r\n### Base Url\r\nIf you want to defined a default base url, just override the `getDefaultBaseUrl` method in your test. Every pages create with @Page will also use this variable.\r\n\r\n### TimeOut\r\nTo set the time to wait when searching an element, you can use in your test :\r\n ```java\r\n withDefaultSearchWait(long l, TimeUnit timeUnit);```\r\n ```\r\n\r\n To set the time to wait when loading a page, you can use :\r\n  ```java\r\n  withDefaultPageWait(long l, TimeUnit timeUnit);```\r\n  ```\r\n\r\nBe aware that when you modified this elements, the webDriver instance will be modified so your page will also be affected.\r\n\r\n### Configuration\r\nYou can defined a default driver configuration using to ways.\r\nFirst, just override the getDriver method and use the selenium way to configure your driver.\r\nYou can also override the setDefaultConfig method and use both selenium and FluentLenium way (withDefaultSearchWait,withDefaultPageWait) to configure your driver.\r\n\r\n## FluentLenium and other frameworks\r\n\r\n### jUnit\r\nFluentLenium uses jUnit by default. You can use test using [jUnit](http://www.junit.org) assertions, but can of course use others frameworks such as [Fluent-assert](http://code.google.com/p/fluent-assert/) or [Hamcrest](http://code.google.com/p/hamcrest/).\r\n\r\n```java\r\ngoTo(\"http://mywebpage/\");\r\nfill(\"#firstName\").with(\"toto\");\r\nclick(\"#create-button\");\r\nassertEqual(\"Hello toto\",title());\r\n```\r\n\r\n### Fest-Assert\r\n```java\r\ngoTo(\"http://mywebpage/\");\r\nfill(\"#firstName\").with(\"toto\");\r\nclick(\"#create-button\");\r\nassertThat(title()).isEqualTo(\"Hello toto\");\r\nassertThat(find(myCssSelector)).hasText(\"present text\");\r\nassertThat(find(myCssSelector)).hasNotText(\"not present text\");\r\nassertThat(find(myCssSelecto1)).hasSize(7);\r\nassertThat(find(myCssSelecto2)).hasSize().lessThan(5);\r\nassertThat(find(myCssSelecto2)).hasSize().lessThanOrEqualTo(5);\r\nassertThat(find(myCssSelecto3)).hasSize().greaterThan(2);\r\nassertThat(find(myCssSelecto3)).hasSize().greaterThanOrEqualTo(2);\r\n```\r\n\r\n### Hamcrest\r\n```java\r\ngoTo(\"http://mywebpage/\");\r\nfill(\"#firstName\").with(\"toto\");\r\nclick(\"#create-button\");\r\nassertThat(title(),equalTo(\"Hello toto\"));\r\n```\r\n\r\n### Built by CloudBees\r\n<img src='http://web-static-cloudfront.s3.amazonaws.com/images/badges/BuiltOnDEV.png'/>\r\n","name":"Fluentlenium","tagline":"FluentLenium makes the writing of acceptance testing more easy and in a fluent way using the power of  css selectors. "}